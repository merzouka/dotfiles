(defvar refresh_script "bash ~/.config/eww/wifi/scripts/refresh")
(defvar connect_script "bash ~/.config/eww/wifi/scripts/connect")
(defvar disconnect_script "bash ~/.config/eww/wifi/scripts/disconnect")
(defvar select_script "bash ~/.config/eww/wifi/scripts/select")
(defvar forget_script "bash ~/.config/eww/wifi/scripts/forget")
(defvar toggle_script "bash ~/.config/eww/wifi/scripts/toggle")

(defwindow wifi :stacking "fg" :wm-ignore true
    :geometry (geometry :width "28%" :height "50%" :x "-0.5%" :y "20%" :anchor "top right")
    (box :orientation "v" :space-evenly false
        (title)
        (label :text "Refreshing..." :visible "${is_refreshing}" :class "refresh_status")
        (connections)
        (button :class "forget" :active "${can_forget}" :halign "end" :onclick "${forget_script} &" "Forget")
    )
)

(defvar is_wifi_on true)
(defvar can_forget false)
(defvar to_forget '')

(defwidget title []
    (box :orientation "h" :space-evenly false :valign "start" :halign "fill" :hexpand true
        (box :orientation "h" :halign "start"
            (button :class "close-window" :onclick "${EWW_CMD} close wifi" "")
            (label :class "title" :text "WI-FI")
        )
        (box :orientation "h" :halign "end" :hexpand true
            (button :class "refresh" :active "${!is_refreshing}" :halign "end"
                    :onclick "${refresh_script} &"
            "")
            (eventbox :class "wifi-toggle"
                        :onclick "${toggle_script} &"
                (overlay
                    (label :text "" :class "wifi-on")
                    (revealer :reveal "${!is_wifi_on}" :transition "slideup" :duration "300ms"
                        (label :text "" :class "wifi-off")
                    )
                )
            )
        )
    )
)

(defvar is_refreshing false)
(defvar indices '[]')
(defvar ssids "[]")
(defvar connected_states '[]')
(defvar selected_states '[]')
(defvar signals '[]')
(defvar num_connections 0)

(defwidget connections []
    (scroll :hsroll false :vscroll true :vexpand true
        (box :orientation "v" :space-evenly false
            (for i in indices
                (connection :ssid "${ssids[i]}" :index i :signal "${signals[i]}"
                            :connected "${connected_states[i]}" :selected "${selected_states[i]}")
            ) 
        )
    )
)

(defvar processing_status '')
(defvar processing false)

(defwidget connection [ssid connected selected index signal]
    (eventbox :class "network-${connected ? "connected" : "disconnected"}" :onclick "${select_script} ${index} &" :valign "start"
        (box :orientation "v" :valign "start" 
            (box :orientation "h" :hexpand true
                (label :class "ssid" :text "${ssid}" :halign "start")
                (label :class "signal" :text "${signal}" :halign "end")
            )
            (overlay :visible "${selected}"
                (label :class "processing_status" :halign "end" :text "${processing_status}" :visible "${processing}")
                (button :class "connect" :visible "${!connected && !processing}" :halign "end"
                        :onclick "${connect_script} ${ssid} &"
                "Connect")
                (button :class "disconnect" :visible "${connected && !processing}" :halign "end"
                        :onclick "${disconnect_script} ${ssid} &"
                "Disconnect")
            )
        )
    )
)
