#!/bin/bash

# Dotfiles Setup Script
# This script installs and configures a complete development environment

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BINDIR="$HOME/.local/bin"
PACKAGE_MANAGER="dnf"
DOTFILES_PATH="$HOME/dotfiles"
FONTS_DIR="$HOME/.fonts"
GITHUB_EMAIL="marzoukayouness@gmail.com"
KEY_PATH="$HOME/.ssh/github"

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to prompt user with better formatting
prompt_user() {
    local message="$1"
    local default="${2:-N}"
    local response
    
    echo -e "\n${BLUE}▶${NC} $message"
    read -p "   Continue? [y/N]: " response
    response=${response:-$default}
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to handle errors
handle_error() {
    log_error "Command failed: $1"
    log_error "Script execution stopped."
    exit 1
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if package is installed
is_package_installed() {
    dnf list installed "$1" 2>/dev/null | grep -q 'Installed'
}

# Create necessary directories
setup_directories() {
    log_info "Setting up directories..."
    
    if [[ ! -e "$BINDIR" ]]; then
        mkdir -p "$BINDIR" || handle_error "Failed to create $BINDIR"
        log_success "Created $BINDIR"
    fi
    
    if [[ ! -e "$FONTS_DIR" ]]; then
        mkdir -p "$FONTS_DIR" || handle_error "Failed to create $FONTS_DIR"
        log_success "Created $FONTS_DIR"
    fi
}

# Update GRUB configuration
update_grub() {
    if prompt_user "Update GRUB Configuration"; then
        log_info "Updating GRUB configuration..."
        
        if [[ -f /etc/grub2.cfg ]]; then
            sudo grub2-mkconfig -o /etc/grub2.cfg || handle_error "Failed to update GRUB config"
        fi
        
        if [[ -f /etc/grub2-efi.cfg ]]; then
            sudo grub2-mkconfig -o /etc/grub2-efi.cfg || handle_error "Failed to update GRUB EFI config"
        fi
        
        log_success "GRUB configuration updated"
    fi
}

# Make scripts globally available
setup_scripts() {
    log_info "Setting up scripts..."
    
    local scripts_path="$DOTFILES_PATH/scripts"
    if [[ -f "$scripts_path/swaplayout" ]] && [[ ! -L "$BINDIR/swaplayout" ]]; then
        ln -s "$scripts_path/swaplayout" "$BINDIR/" || handle_error "Failed to link swaplayout script"
        log_success "Linked swaplayout script"
    fi
}

# Install packages
install_packages() {
    log_info "Installing system packages..."
    
    local dependencies=(
        # General dependencies
        'git' 'gcc' 'neovim' 'npm' 'lxappearance' 'numlockx' 'maim' 'pipewire' 
        'xclip' 'ripgrep' 'powerprofilesctl' 'picom' 'acpi' 'wpctl' 'amixer' 
        'glib' 'acpid' 'bluez' 'bluez-tools' 'brightnessctl'
        # Window manager
        'i3' 'i3status' 'i3lock' 'xbacklight' 'feh' 'i3blocks'
        # Shell
        'fish'
        # Utilities
        'pavucontrol' 'blueman' 'tlp' 'xrandr' 'arandr' 'rofi' 'tmux'
        'alacritty' 'pass' 'gpg' 'zoxide'
    )
    
    local packages_to_install=()
    
    # Check which packages need to be installed
    for pkg in "${dependencies[@]}"; do
        if ! is_package_installed "$pkg"; then
            packages_to_install+=("$pkg")
        fi
    done
    
    if [[ ${#packages_to_install[@]} -eq 0 ]]; then
        log_success "All packages are already installed"
        return
    fi
    
    echo -e "\n${YELLOW}The following packages will be installed:${NC}"
    printf '  • %s\n' "${packages_to_install[@]}"
    
    if prompt_user "Install ${#packages_to_install[@]} packages"; then
        log_info "Installing packages..."
        
        # Install all packages at once for better efficiency
        if ! sudo dnf install -y "${packages_to_install[@]}"; then
            log_warning "Bulk installation failed. Trying individual package installation..."
            
            # If bulk install fails, try individual packages
            for pkg in "${packages_to_install[@]}"; do
                log_info "Installing $pkg..."
                if ! sudo dnf install -y "$pkg"; then
                    log_warning "Failed to install $pkg - skipping"
                else
                    log_success "Installed $pkg"
                fi
            done
        else
            log_success "All packages installed successfully"
        fi
    fi
}

# Install additional software
install_additional_software() {
    # Install Tmux Package Manager
    if prompt_user "Install Tmux Package Manager"; then
        log_info "Installing TPM..."
        if [[ ! -d "$HOME/.tmux/plugins/tpm" ]]; then
            git clone https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm" || handle_error "Failed to install TPM"
            log_success "TPM installed"
        else
            log_success "TPM already installed"
        fi
    fi
    
    # Install Rust
    if prompt_user "Install Rust"; then
        log_info "Installing Rust..."
        if ! command_exists rustc; then
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh || handle_error "Failed to install Rust"
            log_success "Rust installed"
        else
            log_success "Rust already installed"
        fi
    fi
    
    # Install FNM (Node version manager)
    if prompt_user "Install FNM (Node version manager)"; then
        log_info "Installing FNM..."
        if ! command_exists fnm; then
            curl -fsSL https://fnm.vercel.app/install | bash || handle_error "Failed to install FNM"
            log_success "FNM installed"
        else
            log_success "FNM already installed"
        fi
    fi
    
    # Install Tmuxifier
    if prompt_user "Install Tmuxifier"; then
        log_info "Installing Tmuxifier..."
        if [[ ! -d "$HOME/.tmuxifier" ]]; then
            git clone https://github.com/jimeh/tmuxifier.git "$HOME/.tmuxifier" || handle_error "Failed to install Tmuxifier"
            log_success "Tmuxifier installed"
        else
            log_success "Tmuxifier already installed"
        fi
    fi
}

# Copy configuration files
copy_configurations() {
    if prompt_user "Copy configuration files (Fish, Neovim, i3, Alacritty, Rofi, Tmux, Picom, Dunst)"; then
        log_info "Copying configuration files..."
        
        cd "$HOME/.config" || handle_error "Failed to change to .config directory"
        
        local configs=("fish" "nvim" "i3" "alacritty" "rofi" "tmux" "picom" "dunst" "i3blocks")
        
        for config in "${configs[@]}"; do
            if [[ -d "$DOTFILES_PATH/$config" ]]; then
                if [[ ! -L "$config" ]]; then
                    ln -s "$DOTFILES_PATH/$config" . || handle_error "Failed to link $config"
                    log_success "Linked $config configuration"
                else
                    log_success "$config already linked"
                fi
            else
                log_warning "$config directory not found in dotfiles"
            fi
        done
    fi
}

# Configure shell
configure_shell() {
    if prompt_user "Set Fish as default shell"; then
        log_info "Configuring Fish shell..."
        
        local fish_path="/usr/bin/fish"
        if [[ -f "$fish_path" ]]; then
            # Add fish to /etc/shells if not already there
            if ! grep -q "$fish_path" /etc/shells; then
                echo "$fish_path" | sudo tee -a /etc/shells || handle_error "Failed to add fish to /etc/shells"
            fi
            
            # Change default shell
            chsh -s "$fish_path" || handle_error "Failed to change default shell"
            log_success "Fish set as default shell"
        else
            log_error "Fish not found at $fish_path"
        fi
    fi
}

# Apply configurations
apply_configurations() {
    # Apply Tmux configuration
    if [[ -f "$HOME/.config/tmux/tmux.conf" ]]; then
        log_info "Applying Tmux configuration..."
        tmux source "$HOME/.config/tmux/tmux.conf" 2>/dev/null || log_warning "Tmux not running - config will be applied on next start"
        log_success "Tmux configuration applied"
    fi
    
    # Install fonts
    if prompt_user "Install fonts"; then
        log_info "Installing fonts..."
        if [[ -d "$DOTFILES_PATH/fonts" ]]; then
            cp -r "$DOTFILES_PATH/fonts/"* "$FONTS_DIR/" || handle_error "Failed to copy fonts"
            fc-cache -f || handle_error "Failed to update font cache"
            log_success "Fonts installed and cache updated"
        else
            log_warning "Fonts directory not found in dotfiles"
        fi
    fi
    
    # Copy TLP configuration
    if prompt_user "Copy battery configuration (TLP)"; then
        log_info "Copying TLP configuration..."
        if [[ -f "$DOTFILES_PATH/tlp/tlp.conf" ]]; then
            sudo ln -sf "$DOTFILES_PATH/tlp/tlp.conf" /etc/ || handle_error "Failed to link TLP config"
            log_success "TLP configuration linked"
        else
            log_warning "TLP config not found in dotfiles"
        fi
    fi
    
    # Install Neovim dependencies
    if [[ -f "$HOME/.config/nvim/install" ]]; then
        log_info "Installing Neovim dependencies..."
        "$HOME/.config/nvim/install" || handle_error "Failed to install Neovim dependencies"
        log_success "Neovim dependencies installed"
    fi
    
    # Copy wallpapers
    if prompt_user "Copy wallpapers"; then
        log_info "Copying wallpapers..."
        if [[ -d "$DOTFILES_PATH/wallpapers" ]]; then
            mkdir -p "$HOME/Pictures"
            cp -r "$DOTFILES_PATH/wallpapers" "$HOME/Pictures/" || handle_error "Failed to copy wallpapers"
            log_success "Wallpapers copied"
        else
            log_warning "Wallpapers directory not found in dotfiles"
        fi
    fi
}

# Enable services
enable_services() {
    if prompt_user "Enable ACPI service (battery status inquiry)"; then
        log_info "Enabling ACPI service..."
        sudo systemctl enable acpid.service --now || handle_error "Failed to enable ACPI service"
        log_success "ACPI service enabled"
    fi
}

# Setup repositories
setup_repositories() {
    if prompt_user "Enable RPM Fusion repositories"; then
        log_info "Enabling RPM Fusion repositories..."
        
        local fedora_version
        fedora_version=$(rpm -E %fedora)
        
        sudo dnf install -y "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-${fedora_version}.noarch.rpm" || handle_error "Failed to install RPM Fusion free"
        sudo dnf install -y "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-${fedora_version}.noarch.rpm" || handle_error "Failed to install RPM Fusion nonfree"
        
        log_success "RPM Fusion repositories enabled"
    fi
}

# Install optional applications
install_optional_apps() {
    # VSCode
    if prompt_user "Install Visual Studio Code"; then
        log_info "Installing VSCode..."
        
        # Import Microsoft GPG key
        sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc || handle_error "Failed to import Microsoft GPG key"
        
        # Add VSCode repository
        sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo' || handle_error "Failed to add VSCode repository"
        
        # Update package cache and install
        sudo dnf check-update
        sudo dnf install -y code || handle_error "Failed to install VSCode"
        
        log_success "VSCode installed"
    fi
    
    # VLC
    if prompt_user "Install VLC Media Player"; then
        log_info "Installing VLC..."
        sudo dnf install -y vlc || handle_error "Failed to install VLC"
        log_success "VLC installed"
    fi
}

# Configure Git
configure_git() {
    if prompt_user "Setup Git configuration"; then
        log_info "Configuring Git..."
        
        git config --global user.name "merzouka" || handle_error "Failed to set Git username"
        git config --global user.email "$GITHUB_EMAIL" || handle_error "Failed to set Git email"
        
        log_success "Git configuration completed"
    fi
    
    if prompt_user "Generate SSH key for GitHub"; then
        log_info "Generating SSH key..."
        
        if [[ ! -f "$KEY_PATH" ]]; then
            ssh-keygen -t ed25519 -C "$GITHUB_EMAIL" -f "$KEY_PATH" || handle_error "Failed to generate SSH key"
            
            # Start SSH agent and add key
            eval "$(ssh-agent -s)" || handle_error "Failed to start SSH agent"
            ssh-add "$KEY_PATH" || handle_error "Failed to add SSH key to agent"
            
            log_success "SSH key generated and added to agent"
            log_info "Don't forget to add the public key to your GitHub account:"
            log_info "$(cat "${KEY_PATH}.pub")"
        else
            log_success "SSH key already exists"
        fi
    fi
    
    if prompt_user "Copy SSH configuration"; then
        log_info "Copying SSH configuration..."
        
        if [[ -f "$DOTFILES_PATH/ssh/config" ]]; then
            mkdir -p "$HOME/.ssh"
            ln -sf "$DOTFILES_PATH/ssh/config" "$HOME/.ssh/config" || handle_error "Failed to link SSH config"
            log_success "SSH configuration linked"
        else
            log_warning "SSH config not found in dotfiles"
        fi
    fi
}

# Main execution
main() {
    echo -e "${GREEN}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                    Dotfiles Setup Script                     ║${NC}"
    echo -e "${GREEN}║              Setting up your development environment         ║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════════════════════════════╝${NC}"
    
    # Check if running on Fedora
    if ! command_exists dnf; then
        log_error "This script is designed for Fedora systems with DNF package manager"
        exit 1
    fi
    
    # Check if dotfiles directory exists
    if [[ ! -d "$DOTFILES_PATH" ]]; then
        log_error "Dotfiles directory not found at $DOTFILES_PATH"
        log_error "Please clone your dotfiles repository first"
        exit 1
    fi
    
    log_info "Starting setup process..."
    
    # Execute setup steps
    setup_directories
    update_grub
    setup_scripts
    install_packages
    install_additional_software
    copy_configurations
    configure_shell
    apply_configurations
    enable_services
    setup_repositories
    install_optional_apps
    configure_git
    
    echo -e "\n${GREEN}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                     Setup Complete! 🎉                       ║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════════════════════════════╝${NC}"
    
    log_success "Dotfiles setup completed successfully!"
    log_info "You may need to restart your terminal or log out and back in for all changes to take effect."
    
    if command_exists tmux; then
        log_info "Don't forget to press Prefix + I in tmux to install plugins"
    fi
}

# Run the script
main "$@"
